import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * This class will unit test your InventoryItem class.
 * Add this class to the Eclipse project with your InventoryItem class and add JUnit to the project's build path in Eclipse.  
 * (You should have already done this for a project when you installed JUnit -- if not, refer back to installation instructions.) 
 * While this file is active, choose Run -> Run As -> JUnit Test.
 * If your InventoryItem class is written exactly to specs, you should see a green bar in the JUnit tab.  If not, then look carefully
 * at the errors in the Failure Trace, review the specifications, and edit your class. (Do not edit this file.)
 * 
 * @author Maggie
 *
 */
class InventoryItemTest {

	// Fields to create object with and use in testing output
	private static String ITEM_NAME = "Wooden Ladle";
	private static String ITEM_DESCRIPTION = "Ladle carved from olive wood.";
	private static String ITEM_NUMBER = "HW52199";
	private static int QUANTITY = 5;
	// An inventory item to use in each test
	private InventoryItem item;
	// Versions of the item's string with different quantities
	private String initialString;
	private String zeroStockString;
	private String plusOneString;

	@BeforeEach
	void setUp() throws Exception {
		// Create the item and initialize string outputs
		item = new InventoryItem(ITEM_NAME, ITEM_DESCRIPTION, ITEM_NUMBER, QUANTITY);
		initialString = String.format("%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n", "Name:", ITEM_NAME, "Description:", ITEM_DESCRIPTION,
				"Item#:", ITEM_NUMBER, "Quantity:", QUANTITY);
		zeroStockString = String.format("%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n", "Name:", ITEM_NAME, "Description:", ITEM_DESCRIPTION,
				"Item#:", ITEM_NUMBER, "Quantity:", 0);
		plusOneString = String.format("%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n", "Name:", ITEM_NAME, "Description:", ITEM_DESCRIPTION,
				"Item#:", ITEM_NUMBER, "Quantity:", (QUANTITY + 1));
	}

	@Test
	void testAccessors() {
		// Test the accessor methods
		assertEquals(item.getItemNumber(), ITEM_NUMBER);
		assertEquals(item.toString(), initialString);		
	}

	@Test
	void testRemoveTooMuch() {
		// Test attempting to remove too much stock
		assertEquals(item.removeStock(QUANTITY + 1), false);

		// Quantity should not have changed in output string
		assertEquals(item.toString(), initialString);	

		// Should be able to successfully remove all stock
		assertEquals(item.removeStock(QUANTITY), true);

		// Should fail at removing any stock; quantity should be zero
		assertEquals(item.removeStock(1), false);
		assertEquals(item.toString(), zeroStockString);
	}

	@Test
	void testRemoveOneAtATime() {
		// Test attempting to remove stock one item at a time
		for (int i = 0; i < QUANTITY; i++) {
			assertEquals(item.removeStock(1), true);
		}

		// Should fail at removing any stock; quantity should be zero
		assertEquals(item.toString(), zeroStockString);
		assertEquals(item.removeStock(1), false);

	}

	@Test
	void testRemoveAllAtOnce() {
		// Test attempting to remove full stock at once
		assertEquals(item.removeStock(QUANTITY), true);

		// Should fail at removing any stock; quantity should be zero
		assertEquals(item.toString(), zeroStockString);
		assertEquals(item.removeStock(1), false);

	}

	@Test
	void testAdd() {
		// Add one to stock
		item.addStock(1);

		// Quantity should be initial quantity plus one
		// Should be able to remove full quantity
		assertEquals(item.toString(), plusOneString);
		assertEquals(item.removeStock(QUANTITY + 1), true);

	}
}
