import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

/**
 * This class will unit test your Inventory class.
 * Add this class to the Eclipse project with your Inventory class and add JUnit to the project's build path in Eclipse.  
 * (You should have already done this for a project when you installed JUnit -- if not, refer back to installation instructions.) 
 * While this file is active, choose Run -> Run As -> JUnit Test.
 * If your Inventory class is written exactly to specs, you should see a green bar in the JUnit tab.  If not, then look carefully
 * at the errors in the Failure Trace, review the specifications, and edit your class. (Do not edit this file.)
 * 
 * @author Maggie
 *
 */
class InventoryTest {
	
	// Fields to create objects with and use in testing output
	private static String ITEM1_NAME = "A";
	private static String ITEM1_DESCRIPTION = "A description.";
	private static String ITEM1_NUMBER = "A1";
	private static int ITEM1_QUANTITY = 5;
	private static String ITEM2_NAME = "B";
	private static String ITEM2_DESCRIPTION = "B description.";
	private static String ITEM2_NUMBER = "B1";
	private static int ITEM2_QUANTITY = 5;
	private static String INVENTORY_NAME = "I";
	// An inventory to use in each test
	private Inventory inventory;
	// Versions of the item's string with different quantities
	private String initialString;
	private String withAString;
	private String withABString;

	@BeforeEach
	void setUp() throws Exception {
		this.inventory = new Inventory(this.INVENTORY_NAME);
		this.initialString = "Inventory:          " + this.INVENTORY_NAME + "\n";
		this.withAString = String.format("%-20s%s\n%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n", 
				"Inventory:", this.INVENTORY_NAME,
				"Name:", this.ITEM1_NAME, "Description:", this.ITEM1_DESCRIPTION,
                "Item#:", this.ITEM1_NUMBER, "Quantity:", this.ITEM1_QUANTITY);
		this.withABString = String.format("%-20s%s\n%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n%-20s%s\n%-20s%s\n%-20s%s\n%-20s%d\n", 
				"Inventory:", this.INVENTORY_NAME,
				"Name:", this.ITEM1_NAME, "Description:", this.ITEM1_DESCRIPTION,
                "Item#:", this.ITEM1_NUMBER, "Quantity:", this.ITEM1_QUANTITY,
                "Name:", this.ITEM2_NAME, "Description:", this.ITEM2_DESCRIPTION,
                "Item#:", this.ITEM2_NUMBER, "Quantity:", this.ITEM2_QUANTITY);

	}

	@Test
	void testEmptyInventory() {
		// Test the empty inventory's string is just the name
		assertEquals(inventory.toString(), this.initialString);
		// Test that removing stock from an empty inventory returns false
		assertEquals(this.inventory.removeStock(ITEM1_NUMBER, 1), false);
		// Test that adding stock from an empty inventory does not crash
		this.inventory.addStock(ITEM1_NUMBER, 1);
		// Test the empty inventory's string after adding and removing is just the name
		assertEquals(inventory.toString(), this.initialString);
	}
	
	@Test
	void testInventoryOneItem() {
		// Test that adding to an empty inventory gives a string with the added item
		inventory.addItem(this.ITEM1_NUMBER,  this.ITEM1_NAME, this.ITEM1_DESCRIPTION, this.ITEM1_QUANTITY);
		assertEquals(inventory.toString(), this.withAString);
		// Test that the first and only item in the inventory can have stock removed
		assertEquals(inventory.removeStock(this.ITEM1_NUMBER, this.ITEM1_QUANTITY), true);
		// Test that the first and only item in the inventory can have stock added
		inventory.addStock(this.ITEM1_NUMBER, this.ITEM1_QUANTITY);
	}
	
	@Test
	void testInventoryTwoItems() {
		// Test that adding two items to an empty inventory gives a string with the added items
		inventory.addItem(this.ITEM1_NUMBER,  this.ITEM1_NAME, this.ITEM1_DESCRIPTION, this.ITEM1_QUANTITY);
		inventory.addItem(this.ITEM2_NUMBER,  this.ITEM2_NAME, this.ITEM2_DESCRIPTION, this.ITEM2_QUANTITY);
		assertEquals(inventory.toString(), this.withABString);
		// Test that the first item in the inventory can have stock removed
		assertEquals(inventory.removeStock(this.ITEM1_NUMBER, this.ITEM1_QUANTITY), true);
		// Test that the first item in the inventory can have stock added
		inventory.addStock(this.ITEM1_NUMBER, this.ITEM1_QUANTITY);
		// Test that the second and last item in the inventory can have stock removed
		assertEquals(inventory.removeStock(this.ITEM2_NUMBER, this.ITEM2_QUANTITY), true);
		// Test that the second and last item in the inventory can have stock added
		inventory.addStock(this.ITEM2_NUMBER, this.ITEM2_QUANTITY);
	}


}
